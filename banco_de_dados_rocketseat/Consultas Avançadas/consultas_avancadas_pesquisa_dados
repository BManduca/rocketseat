SELECT * FROM customers WHERE city = 'Porto Alegre';


-- OPERADORES DE COMPARAÇÃO

-- filtra produtos com preço maior que 100
SELECT product_id, product_name, price
  FROM products
WHERE price > 100;

--filtra clientes na cidade de São Paulo
SELECT customer_id, first_name || ' ' || last_name AS full_name, city
  FROM customers
WHERE city = 'Rio de Janeiro';

-- buscando registros aonde categoria_id do produto é 3
SELECT product_id, product_name, category_id
  FROM products
WHERE category_id = 3;

-- buscando por todos os pedidos aonde o status é diferente de delivered
SELECT order_id, customer_id, status
  FROM orders
WHERE status <> 'DELIVERED';


-- buscar todos os registros aonde a data de cadastro dos cliente foi feita antes de 01/06/2024
SELECT customer_id, created_at
  FROM customers
WHERE created_at < '2024-06-01';

-- buscando produtos que tenha preço menor ou igual a 50
SELECT product_id, product_name, price
  FROM products
WHERE price <= 50;

INSERT INTO customers(customer_id, first_name, last_name, email, city, created_at) VALUES
  (333, 'joão', null, 'joao.silva@exemplo.com', 'São Paulo', '2024-05-17');

SELECT * FROM customers WHERE last_name IS NOT NULL
  
SELECT COUNT(*) FROM products WHERE price > 100;

-- ##############################################
-- USO DO AND E DO OR
-- ##############################################

-- Buscar clientes em SP cadastrados em/apos jan/2024
SELECT customer_id, first_name, last_name, city
  FROM customers
WHERE city = 'Rio de Janeiro'
  AND created_at >= '2024-01-01';

-- Buscar produtos com preço menor que 50 ou maior que 400
SELECT product_id, product_name, price
  FROM products
WHERE price < 50
  OR price > 100;

-- Buscar por todos os registros/pedidos aonde o status é DELIVERED ou SHIPPED e o total_amount > 300
SELECT order_id, total_amount, status
  FROM orders
WHERE (status = 'DELIVERED' OR status = 'SHIPPED')
  AND total_amount > 300;

-- Buscar todos os pedidos que estejam com status PEDING OU SHIPPED
SELECT order_id, status
  FROM orders
WHERE status IN ('PENDING', 'SHIPPED');

-- Buscar por todos os pedidos das categorias 1, 3 ou 5
SELECT product_id, category_id
  FROM products
WHERE category_id IN (1, 3, 5);

-- Busque pelos clientes que sejam de Manaus, Recife ou Fortaleza
SELECT customer_id, first_name, last_name
  FROM customers
WHERE city = 'Manaus' OR city = 'Recife' OR city = 'Fortaleza';

-- OU

SELECT customer_id, first_name, last_name
  FROM customers
WHERE city IN ('Manaus', 'Recife', 'Fortaleza');

-- Busque por todos os produtos que não sejam das categorias 2, 4 e 6
SELECT product_id, product_name, category_id, price
  FROM products
WHERE category_id NOT IN (2, 4, 6);

-- Buscando pelas categorias que não são nulas e não sejam das categorias 2, 4, 6
SELECT product_id, product_name, category_id, price
  FROM products
WHERE category_id IS NOT NULL
  AND category_id NOT IN (2, 4, 6);


-- ##############################################
-- USO DO BETWEEN
-- ##############################################

-- Buscar por produtos que tenha o preço entre 150 e 300
SELECT product_id, product_name, price
  FROM products
WHERE price BETWEEN 150 AND 300;

-- Buscar por pedidos realizados em maio/2024
SELECT order_id, order_date, customer_id, total_amount
  FROM orders
WHERE order_date BETWEEN '2024-05-01' AND '2024-05-31';


-- Buscar por produtos entre 'Produto 10' e 'Produto 20' => tomar cuidado com esse tipo de consulta
SELECT product_id, product_name
  FROM products
WHERE product_name BETWEEN 'Produto 10' AND 'Produto 20';

-- Buscar por nomes que começam com 'Ju'
SELECT customer_id, first_name
  FROM customers
WHERE first_name LIKE 'Ju%';

-- Busca por clientes que o sobrenome termine com 'Silva'
SELECT customer_id, first_name, last_name
  FROM customers
WHERE first_name LIKE '%ia%';


-- fazendo busca por padrão no nome do produto
SELECT product_id, product_name, price
  FROM products
WHERE product_name LIKE '_roduto 1%';

-- ##############################################
-- USO DO COUNT E DO DISTINCT
-- ##############################################

-- Total de pedidos(inclui todos os registros)
SELECT COUNT(*) AS total_pedidos
  FROM orders;

-- total de registros que tem total_amount não NULL
SELECT COUNT(orders.total_amount) AS total_amount_nao_nulos
  FROM orders;

SELECT COUNT(customers.last_name) AS total_customers_nao_nulos
  FROM customers;

-- retirando registros duplicados => DISTINCT
SELECT COUNT(DISTINCT customers.first_name) AS total_customers_nao_nulos_nao_duplicados
  FROM customers;

SELECT DISTINCT customers.first_name FROM customers ORDER BY customers.first_name ASC;

-- QUANTIDADE DE CLIENTES ÚNICOS QUE FIZERAM PEDIDOS
SELECT COUNT(DISTINCT o.customer_id) AS clientes_unicos
  FROM orders o;

-- QUANTIDADE DE PRODUTOS QUE TEM O PREÇO DEFINIDO (PRICE NÃO É NULL)
SELECT COUNT(price) as produtos_com_preco
  FROM products;


-- ##############################################
-- USO DO SUM, AVG, MAX, MIN E AGRUPAMENTOS
-- ##############################################

-- CALCULAR O FATURAMENTO TOTAL DE TODOS OS PEDIDOS
SELECT SUM(total_amount) AS faturamento_geral
  FROM orders;

-- CALCULAR A MÉDIA DE VALOR DOS PEDIDOS
SELECT AVG(total_amount) AS media_valor_pedidos
  FROM orders;

-- ROUND() → quando você quer representar valores com arredondamento real, como médias, valores financeiros, relatórios de precisão.

-- TRUNCATE() → quando você quer controlar o corte sem alterar o valor, como em cálculos técnicos ou limites matemáticos.

-- total de faturamento e media geral de pedidos
SELECT SUM(total_amount) AS faturamento_geral, ROUND(AVG(total_amount), 2) AS media_valor_pedidos
  FROM orders;

SELECT
  COUNT (total_amount) as total_pedidos,
  SUM(total_amount) AS faturamento_geral,
  ROUND(AVG(total_amount), 2) AS media_valor_pedidos
  FROM orders;

-- MEDIA PREÇOS DOS PRODUTOS
SELECT ROUND(AVG(price), 2) AS media_precos
FROM products;

-- BUSCAR O PREÇO MÁXIMO E O PREÇO MÍNIMO ENTRE TODOS OS PRODUTOS
SELECT
  MAX(price) AS preco_maximo_produtos,
  MIN(price) AS preco_minimo_produtos
FROM products;


-- DATA MÍNIMA DE REGISTRO EM CUSTOMERS (PRIMEIRO CLIENTE CADASTRADO)
SELECT MIN(created_at) AS primeira_data_cadastro
  FROM customers;

-- DATA MÁXIMA DE REGISTRO EM CUSTOMERS (ÚLTIMO CLIENTE CADASTRADO)
SELECT MAX(created_at) AS ultima_data_cadastro FROM customers;


SELECT
  first_name,
  city,
  created_at AS ultima_data_cadastro
FROM customers
ORDER BY created_at DESC
LIMIT 1;

select * from customers;

-- ##############################################
-- USO DE ORDENAÇÃO
-- ##############################################

-- Buscando produtos com base nos preços, do menor para o maior
SELECT product_id, product_name, price
  FROM products
ORDER BY price ASC;

-- ordenando os clientes com base nos nomes
SELECT * FROM customers ORDER BY first_name;

-- ordenando os clientes com base na data de cadastrado
SELECT * FROM customers ORDER BY created_at ASC;

-- ORDENAÇÃO CONJUNTA => ordena primeiro pelo status, depois pela data
SELECT order_id, status, order_date
  FROM orders
  ORDER BY status ASC, order_date ASC;

-- ##############################################
-- USO DE AGRUPAMENTOS
-- ##############################################

-- agrupar itens de pedidos por product_id e contar quantas vezes cada produto foi vendido
SELECT product_id,
    COUNT(*) AS total_vendas
  FROM order_items
GROUP BY product_id;

-- TODAS AS COLUNAS NÃO AGREGADAS PRECISAM ESTAR NO GROUP BY
-- EXIBIR product_id e SUM(quantity) POR PRODUTO
SELECT
    product_id,
    SUM(quantity) AS total_quantidade  
  FROM order_items
GROUP BY product_id;

-- AGRUPAR PEDIDOS POR STATUS E CONTAR QUANTOS PEDIDOS EXISTEM EM CADA STATUS
SELECT
    status,
    COUNT(*) AS qtde_pedidos
  FROM orders
GROUP BY status;

-- AGRUPAR CLIENTES POR CIDADE E EXIBIR QUANTOS CLIENTES EM CADA CIDADE
SELECT
    city,
    COUNT(*) AS total_clientes
  FROM customers
GROUP BY city;

-- ##############################################
-- USO DO HAVING
-- ##############################################

-- FILTRANDO POR GRUPOS COM MAIS DE 5 PRODUTOS
SELECT category_id, COUNT(*) AS qtde_produtos
    FROM product
    GROUP BY category_id
HAVING COUNT(*) > 5;